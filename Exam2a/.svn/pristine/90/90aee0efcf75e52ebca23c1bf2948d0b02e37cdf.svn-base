package bst;

import java.util.ArrayList;

/**
 *
 * Exam 2a. Tree methods.
 * 
 * @author
 */

/*
 * TODO Directions: Implement the methods below. See the paper for details.
 */
public class BinarySearchTree {

	BinaryNode root;

	final BinaryNode NULL_NODE = new BinaryNode(); 

	public BinarySearchTree() {
		root = NULL_NODE;
	}

	/**
	 * Calculates the number of positive elements in the tree minus the number of negative
	 * elements in the tree.
	 * 
	 * @return the number of positives minus number of negatives in the tree
	 */
	public int numPosMinusNumNeg() {
		// TODO Write this!
		return -100;
	}
	
	/**
	 * Determines whether the tree contains an element strictly within the given range, i.e.
	 * whether the tree contains some x where low < x < high. Should run in time O(height).
	 * @param low
	 * @param high
	 * @return true iff the tree contains some x where low < x < high
	 */
	public boolean containsStrictlyInRange(Integer low, Integer high) {
		// TODO Write this!
		return false;
	}

	/**
	 * Removes all single parents (nodes with exactly one child) from the tree.
	 */
	public void removeSingleParents() {
		// TODO Write this!
	}
		
	
	
	
	
	
	
	// The next methods are used by the unit tests
	public void insert(Integer e) {
		root = root.insert(e);
	}

	/**
	 * Feel free to call from tests to use to verify the shapes of your trees
	 * while debugging. Just remove the calls you are done so the output isn't
	 * cluttered.
	 * 
	 * @return A string showing a traversal of the nodes where children are
	 *         indented so that the structure of the tree can be determined.
	 * 
	 */
	public String toIndentString() {
		return root.toIndentString("");
	}

	@Override
	public String toString() {
		return this.toArrayList().toString();
	}

	
	public ArrayList<Integer> toArrayList() {
		ArrayList<Integer> ar = new ArrayList<Integer>();
		root.toArrayList(ar);
		return ar;
	}

	// /////////////// BinaryNode
	public class BinaryNode {
		
		public Integer data;
		public BinaryNode left;
		public BinaryNode right;

		// The rest of the methods are used by the unit tests and for debugging
		public BinaryNode() {
			this.data = null;
			this.left = null;
			this.right = null;
		}
		
		public BinaryNode(Integer element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public BinaryNode insert(Integer e) {
			if (this == NULL_NODE) {
				return new BinaryNode(e);
			} else if (e < data) {
				left = left.insert(e);
			} else if (e > data) {
				right = right.insert(e);
			} else {
				// do nothing
			}
			return this;
		}
		
		public void toArrayList(ArrayList<Integer> ar) {
			if (this == NULL_NODE) {
				return;
			}
			left.toArrayList(ar);
			ar.add(data);
			right.toArrayList(ar);
		}


		public String toIndentString(String indent) {
			if (this == NULL_NODE) {
				return indent + "NULL\n";
			}
			String myInfo = indent + String.format("%d\n", this.data);
			return myInfo + this.left.toIndentString(indent + "  ") + this.right.toIndentString(indent + "  ");
		}
	}

}